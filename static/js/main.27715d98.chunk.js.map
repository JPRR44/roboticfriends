{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.27715d98.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) =>{\n\n    return(\n        <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            {/*Ahora estos son comentarios*/}\n            {/*Usas el Id de tus props para cambiar las imagenes, pones el link con {} para hacerlo JS y ya te deja how cool.*/}\n            <img alt = 'imageRobots' src = {`https://robohash.org/${id}200x200`}></img> \n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) =>{\n    return(\n        <div>\n            {\n            robots.map((user, i)=>{\n                return (<Card \n                    key = {i} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email}/>\n                );\n                //Debes de poner un key 'i',   a cada loop para que sepa identificar los robots uno por uno\n                //Si no lo pones igual va a jalar, pero si haces un cambio va a tener que cehcar en todos y reiniciar el doom\n                //De lo contrario si tiene una key puede encontrar solo esa y modificar solo esa\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange}) =>{\n    return(\n        <div className = 'pa2'>\n            <input \n                className ='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='Search Robots'\n                onChange = {searchChange} \n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (\n        <div style = {{ overflowY: 'scroll', border: '1px solid black', height: '600px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1>Oops that is not good </h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React , { Component } from 'react';\n\nclass CounterButton extends Component{\n    constructor(){\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState){    \n        if(this.state.count !== nextState.count) return true\n        else return false;\n    }\n\n    updateCount = () => {\n        this.setState(state =>{//Grab de current state and return the new state\n            return {count: this.state.count + 1}\n        })\n    }\n\n    render(){\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton; ","import React , { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component{\n    // shouldComponentUpdate(nextProps, nextState){//This is so the header component only renders once\n    //                                             //It will update again if it is true, but its false so just once\n    //     return false;\n    // }\n\n    render(){\n        return (\n        <div>\n            <h1 className='f1'>Robo Friends</h1>\n            <CounterButton color={'red'} />\n        </div>\n        );\n    }\n}\n\nexport default Header; ","import React , { Component } from 'react';\nimport CardList from '../components/CardList';\nimport { connect } from 'react-redux';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport Header from '../components/Header'\n\nimport {Â setSearchField , requestRobots} from '../actions';\n\nconst mapStateToProps = state =>{\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\n//Dispatch is what triggers the action\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () =>dispatch(requestRobots())\n    }\n}\n\n//STATE = The description of your App, in this case are the robots and whatever enters on the search box. it is able to change\n//State usually lives in the parent component (APP), describes what can change in the app\nclass App extends Component{\n    componentDidMount(){//Dont se arrow functions because is part of react\n        this.props.onRequestRobots();\n    }\n\n    render(){\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return isPending?\n            <h1>Loading</h1>:\n            (\n            <div className = 'tc'>\n                <Header/>\n                <SearchBox searchChange = {onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>{/*Si algo sale mal con la cardlist, lo va a cachar el error*/}\n                        <CardList robots = {filteredRobots}/>\n                    </ErrorBoundry>\n                </Scroll>\n                \n            </div>\n        );}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n\nexport const setSearchField = (text) =>({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n}) \n\nexport const requestRobots = () => (dispatch) => {//Function that returns a function so it can use a thunk, thunk only uses when it returns a function\n    dispatch({ type: REQUEST_ROBOTS_PENDING})//NO PAYLOAD BECAUSE IS PENDING\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))//if success, it returns as payload the data that you introduce\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))//in case something fails\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n\n//CREATE STATE \nconst initialStateSearch = {\n    searchField: ''\n}\n\n//REDUCER SEARCH\nexport const searchRobots = (state = initialStateSearch, action={}) =>{\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\n\n//CREATE NEW STATES\nconst initialStateRobots= {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n//REDUCER REQUEST\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending:false});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport {Â createLogger} from 'redux-logger'\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk'\nimport App from './containers/App';//Padre de todos tus componentes, como tu main\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'; //FOR DOCUMENTATION GO TO TACHYONS STYLES ON GOOGLE\nimport { searchRobots, requestRobots} from './reducers';\n\nconst logger = createLogger();\n//We combine all reducers in one and add it to the store so we can use al of them\nconst rootReducer = combineReducers({ searchRobots, requestRobots } )\nconst store = \n            createStore(rootReducer, applyMiddleware(thunkMiddleware ,logger))\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>,\n                document.getElementById('root'));\nserviceWorker.unregister();  \n"],"sourceRoot":""}